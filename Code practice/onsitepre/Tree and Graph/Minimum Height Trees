/**
For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1:

Given n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3
return [1]

Example 2:

Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5
return [3, 4]
**/
public class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res=new ArrayList<Integer>();
        List<List<Integer>> board=new ArrayList<>();
        int[] degree=new int[n];
        Set<Integer> set=new HashSet<Integer>();
        for(int i=0;i<n;i++){
            set.add(i);
        }
        for(int i=0;i<n;i++){
            List<Integer> sub=new ArrayList<Integer>();
            board.add(sub);
        }
        for(int j=0;j<edges.length;j++)
        {
            board.get(edges[j][0]).add(edges[j][1]);
            board.get(edges[j][1]).add(edges[j][0]);
            degree[edges[j][0]]++;
            degree[edges[j][1]]++;
        }
        
        while(set.size()>2)
        {
            Set<Integer> delete=new HashSet<Integer>();
            for(int x:set){
                if(degree[x]==1&&set.size()>2){
                    delete.add(x);
             }
            }
            for(int y:delete)
            {
                set.remove(y);
                degree[y]--;
               for(int k:board.get(y)) {
                   degree[k]--;
               }
            }
            
        }
        for(int rest:set)
        {
            res.add(rest);
        }
        return res;
            
    }
}