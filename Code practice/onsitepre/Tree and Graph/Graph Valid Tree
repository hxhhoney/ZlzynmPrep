/**
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Show Hint 
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

**/
public class Solution {
    public boolean validTree(int n, int[][] edges) {
        Set<Integer> set=new HashSet<Integer>();
        List<List<Integer>> board=new ArrayList<>();
        int[] degree=new int[n];
        for(int i=0;i<n;i++){
            set.add(i);
        }
        for(int i=0;i<n;i++){
            List<Integer> sub=new ArrayList<Integer>();
            board.add(sub);
        }
        for(int j=0;j<edges.length;j++)
        {
            board.get(edges[j][0]).add(edges[j][1]);
            board.get(edges[j][1]).add(edges[j][0]);
            degree[edges[j][0]]++;
            degree[edges[j][1]]++;
        }
        while(set.size()>1){
            int l=0;
            while(l<n)
            {
                if(degree[l]==1)
                {
                    break;
                }
                l++;
            }
            if(l==n)
            {
                if(set.size()==1)
                return true;
                else return false;
            }
            degree[l]=0;
            set.remove(l);
            for(int x:board.get(l)){
                degree[x]--;
            }
        }
        return true;
    }
}