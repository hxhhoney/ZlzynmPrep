/**
Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.
**/

/*
  Implement a trie with insert, search, and startsWith methods.
  
  Note:
  You may assume that all inputs are consist of lowercase letters a-z.
*/
class TrieNode {
    // Initialize your data structure here.
    char parent;
    boolean isend=false;
    Map<Character,TrieNode> kid=new HashMap<>();
    public TrieNode() {
    }
    public TrieNode(char parent){
        this.parent=parent;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode cur=root;
        for(int i=0;i<word.length();i++){
            if(cur.kid.containsKey(word.charAt(i)))
            {
                cur=cur.kid.get(word.charAt(i));
            }
            else
            {
                TrieNode temp=new TrieNode(word.charAt(i));
                cur.kid.put(word.charAt(i),temp);
                cur=temp;
            }
        }
        cur.isend=true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode cur=root;
        for(int i=0;i<word.length();i++)
        {
            if(!cur.kid.containsKey(word.charAt(i)))
            return false;
            else
            cur=cur.kid.get(word.charAt(i));
        }
        return cur.isend;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode cur=root;
        for(int i=0;i<prefix.length();i++){
            if(cur.kid.containsKey(prefix.charAt(i)))
            {
                cur=cur.kid.get(prefix.charAt(i));
            }
            else
            {
                return false;
            }
        }
        return true;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");