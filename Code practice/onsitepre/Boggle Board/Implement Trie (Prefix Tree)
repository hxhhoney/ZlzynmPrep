/**
Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.
**/

/*
  Implement a trie with insert, search, and startsWith methods.
  
  Note:
  You may assume that all inputs are consist of lowercase letters a-z.
*/
class TrieNode {
    // Initialize your data structure here.
    char ch;
    boolean isEnd = false;
    Map<Character, TrieNode> children = new HashMap<Character, TrieNode>();
    
    public TrieNode() {}
    public TrieNode(char ch) { this.ch = ch;}
}

public class Trie {
    private TrieNode root;


    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
      TrieNode cur = root;
      for(int i = 0; i < word.length(); i++){
          char ch = word.charAt(i);
          if(cur.children.containsKey(ch)){
              cur = cur.children.get(ch);
          }
          else{
              TrieNode tmp = new TrieNode(ch);
              cur.children.put(ch, tmp);
              cur = tmp;
          }
      }
      cur.isEnd = true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode cur = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(cur.children.containsKey(ch)){
                cur = cur.children.get(ch);
            }
            else{
                return false;
            }
        }
        return cur.isEnd;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode cur = root;
        for(int i = 0; i < prefix.length(); i++){
            char ch = prefix.charAt(i);
            if(cur.children.containsKey(ch)){
                cur = cur.children.get(ch);
            }
            else{
                return false;
            }
        }
        return true;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");