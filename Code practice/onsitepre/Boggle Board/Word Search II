/**
Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].
Note:
You may assume that all inputs are consist of lowercase letters a-z.
**/
Skip to content
This repository
Search
Pull requests
Issues
Gist
 @hxhhoney
 Watch 2
  Unstar 2
  Fork 0 Yanhan0507/Z-Practice
 Code  Issues 0  Pull requests 0  Wiki  Pulse  Graphs
Tree: aa736be82a Find file Copy pathZ-Practice/Word Sear ii
af0e592  on Sep 5, 2015
@Yanhan0507 Yanhan0507 Create Word Sear ii
1 contributor
RawBlameHistory     131 lines (109 sloc)  3.59 KB
/*
Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].
*/

public class Solution {
    
    public List<String> findWords(char[][] board, String[] words) {
        Set<String> result = new HashSet<String>();
        Trie trie = new Trie();
        for(String str: words){
            trie.insert(str);
        }
        StringBuilder sb = new StringBuilder();
        boolean[][] marked = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                findWords(board, trie, sb, marked, result, i, j);
            }
        }
        
        return new ArrayList<String>(result);
    }
    
    private void findWords(char[][] board, Trie trie, StringBuilder sb, boolean[][] marked, Set<String> result, int i, int j){
        if(i<0 || i >= board.length || j<0 || j >= board[i].length || marked[i][j]){
            return;
        }
        sb.append(board[i][j]);
        if(!trie.startsWith(sb.toString())){
            sb.deleteCharAt(sb.length() - 1);
            return;
        }
        if(trie.search(sb.toString())){
            result.add(sb.toString());
        }
        marked[i][j] = true;
        findWords(board, trie, sb, marked, result, i+1, j);
        findWords(board, trie, sb, marked, result, i-1, j);
        findWords(board, trie, sb, marked, result, i, j+1);
        findWords(board, trie, sb, marked, result, i, j-1);
        marked[i][j] = false;
        sb.deleteCharAt(sb.length() - 1);
    }
    
    
    
    
    
    
    class TrieNode {
    // Initialize your data structure here.
    char ch;
    boolean isEnd = false;
    Map<Character, TrieNode> children = new HashMap<Character, TrieNode>();
    
    public TrieNode() {}
    public TrieNode(char ch) { this.ch = ch;}
}

public class Trie {
    private TrieNode root;


    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
      TrieNode cur = root;
      for(int i = 0; i < word.length(); i++){
          char ch = word.charAt(i);
          if(cur.children.containsKey(ch)){
              cur = cur.children.get(ch);
          }
          else{
              TrieNode tmp = new TrieNode(ch);
              cur.children.put(ch, tmp);
              cur = tmp;
          }
      }
      cur.isEnd = true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode cur = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(cur.children.containsKey(ch)){
                cur = cur.children.get(ch);
            }
            else{
                return false;
            }
        }
        return cur.isEnd;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode cur = root;
        for(int i = 0; i < prefix.length(); i++){
            char ch = prefix.charAt(i);
            if(cur.children.containsKey(ch)){
                cur = cur.children.get(ch);
            }
            else{
                return false;
            }
        }
        return true;
    }
}
}

