/**
Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.
**/

public class WordDictionary {
    TrieNode root = new TrieNode();
    // Adds a word into the data structure.
    public void addWord(String word) {
        TrieNode cur = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(cur.children.containsKey(ch)){
                cur = cur.children.get(ch);
            }
            else{
                TrieNode tmp = new TrieNode(ch);
                cur.children.put(ch, tmp);
                cur = tmp;
            }
        }
        cur.isEnd = true;
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return helper(word, root, 0);
    }
    
    private boolean helper(String target, TrieNode cur, int index){
      
        if(index == target.length()){
            return cur.isEnd;
        }
        char ch = target.charAt(index);
        boolean result = false;
        if(cur.children.containsKey(ch)){
            return helper(target, cur.children.get(ch), index + 1);
        }
        else if(ch == '.'){
            Set<Character> set = cur.children.keySet();
            for(Character c: set){
                result = result || helper(target, cur.children.get(c), index+1);
                if(result){
                    return result;
                }
            }
        }
        return result;
    }
    
    class TrieNode{
        char ch;
        boolean isEnd = false;
        public TrieNode(){};
        Map<Character, TrieNode> children = new HashMap<Character, TrieNode>();
        public TrieNode(char ch){
            this.ch = ch;
        }
    }
}
// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary = new WordDictionary();
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");